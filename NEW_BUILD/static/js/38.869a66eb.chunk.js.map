{"version":3,"file":"static/js/38.869a66eb.chunk.js","mappings":"mQAqGA,UAnFc,WACZ,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,GAA8CC,EAAAA,EAAAA,MAAtCC,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,eAC3B,GAAqCC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,QAA1DC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,SAEzBC,EAAAA,EAAAA,YAAU,WAKR,GAAIF,EAAiB,CAAC,IAAD,EACbF,EAAK,UAAGK,KAAKC,MAAMR,EAAe,iBAA7B,QAA0C,IACrDN,EAASQ,EAAO,CAAEO,SAAS,SACtB,GAAwB,OAApBL,EACTZ,GAASkB,EAAAA,EAAAA,WACJ,CAEL,IAAMC,EAAOX,EAAe,QAC5B,GAAIW,EAAM,CACR,IAAMC,EAAS,mCAAG,WAAOC,GAAP,kGAESrB,GAASsB,EAAAA,EAAAA,GAAY,CAAED,OAAAA,KAFhC,OAERE,EAFQ,QAGdC,EAAAA,EAAAA,IAAM,CAAEC,OAAQ,UAAWC,QAAO,OAAEH,QAAF,IAAEA,GAAF,UAAEA,EAAUI,eAAZ,aAAE,EAAmBC,SAHzC,iDAKdJ,EAAAA,EAAAA,IAAM,CAAEC,OAAQ,QAASC,QAAQ,EAAD,KALlB,yDAAH,sDASTL,EAAS,CAAEF,KAAAA,EAAMU,MAAOC,EAAAA,EAAAA,mBAC9BvB,EAAkB,QAClBa,EAAUC,GAIZ,IAAMU,EAAQvB,EAAe,SACzBuB,KACFP,EAAAA,EAAAA,IAAM,CAAEC,OAAQ,QAASC,QAAQ,UAAD,OAAYK,KAC5CxB,EAAkB,aAGrB,CAACP,EAAUE,EAAUM,EAAgBD,EAAmBK,IAM3D,OAAIC,GAAgB,SAAC,KAAD,CAAiBmB,OAAK,KAGxC,UAAC,KAAD,CAAeC,QAAS,CAAC,OAAQ,SAAjC,WACE,UAAC,KAAD,YACE,iDACA,iBAAMC,KAAK,cAAcR,QAAQ,0BAEnC,SAAC,KAAD,KAEA,UAAC,KAAD,YACE,SAAC,IAAD,CAAaS,MAAM,OAAOC,IAAI,UAE9B,iDAEA,SAAC,KAAD,CACEC,KAAK,UACLC,KAAK,QACLC,MAAM,UACNC,QAvBc,WAAO,IAAD,EAC1BC,OAAOrC,SAASsC,MAAOC,EAAAA,EAAAA,GAAW,UAACvC,EAASM,aAAV,aAAC,EAAgBkC,OAkB/C,4BASA,gEAEE,SAAC,KAAD,CAAMC,GAAG,wBAAT,kCAFF,oBAIE,SAAC,KAAD,CAAMA,GAAG,kBAAT,4BAJF","sources":["pages/Login.jsx"],"sourcesContent":["import { useEffect } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\n\nimport { ReactComponent as ResoBinLogo } from 'assets/svgs/logo.svg'\nimport {\n  AuthBoxContainer,\n  AuthButton,\n  LoaderAnimation,\n  PageContainer,\n  toast,\n} from 'components/shared'\nimport { getLoginURL, SSO } from 'config/sso'\nimport { CSRFToken } from 'helpers'\nimport { useQueryString } from 'hooks'\nimport { getAuthStatusAction, loginAction } from 'store/authSlice'\n\nconst Login = () => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const location = useLocation()\n  const { deleteQueryString, getQueryString } = useQueryString()\n  const { isAuthenticated, loading } = useSelector((state) => state.auth)\n\n  useEffect(() => {\n    // * isAuthenticated === true => already authenticated => redirect away from login\n    // * isAuthenticated === null => auth status unknown => check with backend server\n    // * isAuthenticated === false => not authenticated => check if auth is possible\n\n    if (isAuthenticated) {\n      const state = JSON.parse(getQueryString('state')) ?? '/'\n      navigate(state, { replace: true })\n    } else if (isAuthenticated === null) {\n      dispatch(getAuthStatusAction())\n    } else {\n      // ? If user is not authenticated\n      const code = getQueryString('code')\n      if (code) {\n        const loginUser = async (params) => {\n          try {\n            const response = await dispatch(loginAction({ params }))\n            toast({ status: 'success', content: response?.payload?.detail })\n          } catch (error) {\n            toast({ status: 'error', content: error })\n          }\n        }\n\n        const params = { code, redir: SSO.BASE_REDIRECT_URI }\n        deleteQueryString('code')\n        loginUser(params)\n      }\n\n      // ? If SSO login is unsuccessfull, an error param appears in the query string\n      const error = getQueryString('error')\n      if (error) {\n        toast({ status: 'error', content: `Error: ${error}` })\n        deleteQueryString('error')\n      }\n    }\n  }, [dispatch, navigate, getQueryString, deleteQueryString, isAuthenticated])\n\n  const redirectLogin = () => {\n    window.location.href = getLoginURL(location.state?.from)\n  }\n\n  if (loading) return <LoaderAnimation fixed />\n\n  return (\n    <PageContainer disable={['menu', 'aside']}>\n      <Helmet>\n        <title>Log In - ResoBin</title>\n        <meta name=\"description\" content=\"Login to continue\" />\n      </Helmet>\n      <CSRFToken />\n\n      <AuthBoxContainer>\n        <ResoBinLogo width=\"3rem\" alt=\"logo\" />\n\n        <h1>Welcome to ResoBin!</h1>\n\n        <AuthButton\n          type=\"primary\"\n          size=\"large\"\n          color=\"#303f9f\"\n          onClick={redirectLogin}\n        >\n          Login via SSO\n        </AuthButton>\n\n        <span>\n          By logging in you accept our&nbsp;\n          <Link to=\"/terms-and-conditions\">Terms and Conditions</Link>\n          &nbsp;and our &nbsp;\n          <Link to=\"/privacy-policy\">Privacy Policy</Link>.\n        </span>\n      </AuthBoxContainer>\n    </PageContainer>\n  )\n}\n\nexport default Login\n"],"names":["dispatch","useDispatch","navigate","useNavigate","location","useLocation","useQueryString","deleteQueryString","getQueryString","useSelector","state","auth","isAuthenticated","loading","useEffect","JSON","parse","replace","getAuthStatusAction","code","loginUser","params","loginAction","response","toast","status","content","payload","detail","redir","SSO","error","fixed","disable","name","width","alt","type","size","color","onClick","window","href","getLoginURL","from","to"],"sourceRoot":""}